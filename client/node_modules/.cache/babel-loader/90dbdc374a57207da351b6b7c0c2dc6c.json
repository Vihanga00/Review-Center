{"ast":null,"code":"import { GET_TOP_POSTS, GET_TOP_POSTS_SUCCESS, GET_TOP_POSTS_FAILURE } from '../constants/actionTypes';\nimport * as api from '../api/index';\nexport const getTopPosts = () => async dispatch => {\n  try {\n    dispatch({\n      type: GET_TOP_POSTS\n    });\n    const {\n      data\n    } = await api.fetchTopPosts('top5');\n    dispatch({\n      type: GET_TOP_POSTS_SUCCESS,\n      payload: data\n    }); // Dispatching the success action with the fetched top posts data\n  } catch (error) {\n    dispatch({\n      type: GET_TOP_POSTS_FAILURE,\n      payload: error.message\n    }); // Dispatching the failure action with the error message\n\n    console.log(error);\n  }\n};\nexport const getPost = id => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data\n    } = await api.fetchPost(id);\n    dispatch({\n      type: FETCH_POST,\n      payload: {\n        post: data\n      }\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getPosts = page => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data: {\n        data,\n        currentPage,\n        numberOfPages\n      }\n    } = await api.fetchPosts(page);\n    dispatch({\n      type: FETCH_ALL,\n      payload: {\n        data,\n        currentPage,\n        numberOfPages\n      }\n    });\n    dispatch({\n      type: END_LOADING\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getPostsByCreator = name => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data: {\n        data\n      }\n    } = await api.fetchPostsByCreator(name);\n    dispatch({\n      type: FETCH_BY_CREATOR,\n      payload: {\n        data\n      }\n    });\n    dispatch({\n      type: END_LOADING\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"sources":["D:/review center/client/src/actions/getTopPosts.js"],"names":["GET_TOP_POSTS","GET_TOP_POSTS_SUCCESS","GET_TOP_POSTS_FAILURE","api","getTopPosts","dispatch","type","data","fetchTopPosts","payload","error","message","console","log","getPost","id","START_LOADING","fetchPost","FETCH_POST","post","getPosts","page","currentPage","numberOfPages","fetchPosts","FETCH_ALL","END_LOADING","getPostsByCreator","name","fetchPostsByCreator","FETCH_BY_CREATOR"],"mappings":"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","sourcesContent":["import { GET_TOP_POSTS, GET_TOP_POSTS_SUCCESS, GET_TOP_POSTS_FAILURE } from '../constants/actionTypes';\r\nimport * as api from '../api/index';\r\n\r\nexport const getTopPosts = () => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: GET_TOP_POSTS });\r\n    \r\n    const { data } = await api.fetchTopPosts('top5');\r\n\r\n    dispatch({ type: GET_TOP_POSTS_SUCCESS, payload: data }); // Dispatching the success action with the fetched top posts data\r\n  } catch (error) {\r\n    dispatch({ type: GET_TOP_POSTS_FAILURE, payload: error.message }); // Dispatching the failure action with the error message\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const getPost = (id) => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: START_LOADING });\r\n\r\n    const { data } = await api.fetchPost(id);\r\n\r\n    dispatch({ type: FETCH_POST, payload: { post: data } });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const getPosts = (page) => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: START_LOADING });\r\n    const { data: { data, currentPage, numberOfPages } } = await api.fetchPosts(page);\r\n\r\n    dispatch({ type: FETCH_ALL, payload: { data, currentPage, numberOfPages } });\r\n    dispatch({ type: END_LOADING });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const getPostsByCreator = (name) => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: START_LOADING });\r\n    const { data: { data } } = await api.fetchPostsByCreator(name);\r\n\r\n    dispatch({ type: FETCH_BY_CREATOR, payload: { data } });\r\n    dispatch({ type: END_LOADING });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};"]},"metadata":{},"sourceType":"module"}