{"ast":null,"code":"var _jsxFileName = \"D:\\\\review center\\\\client\\\\src\\\\components\\\\Posts\\\\Top5.js\";\nimport React, { useEffect, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { CircularProgress, Grid, Typography, Button, Container } from '@material-ui/core';\nimport { getTopPosts } from '../../actions/getTopPosts';\nimport useStyles from './topstyles';\nimport jsPDF from 'jspdf';\nconst MESSAGE_MAX_LENGTH = 450; // Adjust the maximum length as per your requirement\n\nconst Top5 = () => {\n  const dispatch = useDispatch();\n  const {\n    posts,\n    isLoading\n  } = useSelector(state => state.posts);\n  const sortedPosts = [...posts].sort((a, b) => b.likeCount - a.likeCount);\n  const classes = useStyles();\n  const containerRef = useRef(null);\n  useEffect(() => {\n    dispatch(getTopPosts());\n  }, [dispatch]);\n\n  if (isLoading) {\n    return /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      justify: \"center\",\n      alignItems: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(CircularProgress, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  const truncateText = text => {\n    if (text.length <= MESSAGE_MAX_LENGTH) {\n      return text;\n    }\n\n    return `${text.substring(0, MESSAGE_MAX_LENGTH)}...`;\n  };\n\n  const handleDownload = () => {\n    const pdf = new jsPDF();\n    let yPos = 20; //heading text\n\n    pdf.setFontSize(18);\n    pdf.pdf.setTextColor('#000');\n    pdf.text('Best 5 Experiences to have with TourGenie according to the Customer Reviews', 10, yPos);\n    yPos += 30;\n    sortedPosts.forEach((post, index) => {\n      if (index !== 0) {\n        yPos += 10;\n      }\n\n      const {\n        title,\n        name,\n        createdAt,\n        message,\n        likeCount\n      } = post;\n      pdf.setFontSize(14);\n      pdf.setTextColor('#000000');\n      pdf.text(`${index + 1}. Review Title: ${title}`, 10, yPos);\n      pdf.setFontSize(12);\n      pdf.text(`Review posted by: ${name}`, 10, yPos + 10);\n      pdf.text(`Review posted at: ${createdAt.substring(0, 10)}`, 10, yPos + 20);\n      pdf.text(`Review Message: ${truncateText(message)}`, 10, yPos + 40);\n      pdf.text(`Total Likes: ${likeCount}`, 10, yPos + 30);\n      yPos += 50;\n    });\n    pdf.save('top_posts.pdf');\n  };\n\n  return /*#__PURE__*/React.createElement(Container, {\n    maxWidth: \"st\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }, \"Best 5 Experiences to have with TourGenie according to the Customer Reviews\"), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: handleDownload,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }, \"Download as PDF\"), sortedPosts.map((post, index) => /*#__PURE__*/React.createElement(\"div\", {\n    key: post._id,\n    className: classes.postContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, index > 0 && /*#__PURE__*/React.createElement(\"hr\", {\n    className: classes.divider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h5\",\n    component: \"h2\",\n    className: classes.reviewTitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }\n  }, index + 1, \". Review Title: \", post.title), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"subtitle1\",\n    color: \"textSecondary\",\n    className: classes.reviewerName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 11\n    }\n  }, \"Review posted by: \", post.name), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"subtitle2\",\n    color: \"textSecondary\",\n    className: classes.postedAt,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 11\n    }\n  }, \"Review posted at: \", post.createdAt.substring(0, 10)), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"body2\",\n    component: \"p\",\n    className: classes.reviewMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 11\n    }\n  }, \"Review Message: \", truncateText(post.message)), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"subtitle2\",\n    color: \"textSecondary\",\n    className: classes.totalLikes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 11\n    }\n  }, \"Total Likes: \", post.likeCount))));\n};\n\nexport default Top5;","map":{"version":3,"sources":["D:/review center/client/src/components/Posts/Top5.js"],"names":["React","useEffect","useRef","useDispatch","useSelector","CircularProgress","Grid","Typography","Button","Container","getTopPosts","useStyles","jsPDF","MESSAGE_MAX_LENGTH","Top5","dispatch","posts","isLoading","state","sortedPosts","sort","a","b","likeCount","classes","containerRef","truncateText","text","length","substring","handleDownload","pdf","yPos","setFontSize","setTextColor","forEach","post","index","title","name","createdAt","message","save","map","_id","postContainer","divider","reviewTitle","reviewerName","postedAt","reviewMessage","totalLikes"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { CircularProgress, Grid, Typography, Button, Container } from '@material-ui/core';\r\nimport { getTopPosts } from '../../actions/getTopPosts';\r\nimport useStyles from './topstyles';\r\nimport jsPDF from 'jspdf';\r\n\r\nconst MESSAGE_MAX_LENGTH = 450; // Adjust the maximum length as per your requirement\r\n\r\nconst Top5 = () => {\r\n  const dispatch = useDispatch();\r\n  const { posts, isLoading } = useSelector((state) => state.posts);\r\n  const sortedPosts = [...posts].sort((a, b) => b.likeCount - a.likeCount);\r\n  const classes = useStyles();\r\n  const containerRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    dispatch(getTopPosts());\r\n  }, [dispatch]);\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <Grid container justify=\"center\" alignItems=\"center\">\r\n        <CircularProgress />\r\n      </Grid>\r\n    );\r\n  }\r\n\r\n  const truncateText = (text) => {\r\n    if (text.length <= MESSAGE_MAX_LENGTH) {\r\n      return text;\r\n    }\r\n    return `${text.substring(0, MESSAGE_MAX_LENGTH)}...`;\r\n  };\r\nconst handleDownload = () => {\r\n  const pdf = new jsPDF();\r\n\r\n  let yPos = 20;\r\n\r\n  //heading text\r\n  pdf.setFontSize(18);\r\n  pdf.\r\n  pdf.setTextColor('#000');\r\n  pdf.text('Best 5 Experiences to have with TourGenie according to the Customer Reviews', 10, yPos);\r\n\r\n  yPos += 30;\r\n\r\n  sortedPosts.forEach((post, index) => {\r\n    if (index !== 0) {\r\n      yPos += 10;\r\n    }\r\n\r\n    const { title, name, createdAt, message, likeCount } = post;\r\n\r\n    pdf.setFontSize(14);\r\n    pdf.setTextColor('#000000');\r\n    pdf.text(`${index + 1}. Review Title: ${title}`, 10, yPos);\r\n    pdf.setFontSize(12);\r\n    pdf.text(`Review posted by: ${name}`, 10, yPos + 10);\r\n    pdf.text(`Review posted at: ${createdAt.substring(0, 10)}`, 10, yPos + 20);\r\n    pdf.text(`Review Message: ${truncateText(message)}`, 10, yPos + 40);\r\n    pdf.text(`Total Likes: ${likeCount}`, 10, yPos + 30);\r\n\r\n    yPos += 50;\r\n  });\r\n\r\n  pdf.save('top_posts.pdf');\r\n};\r\n\r\n  return (\r\n    <Container maxWidth=\"st\">\r\n      <h1>Best 5 Experiences to have with TourGenie according to the Customer Reviews</h1>\r\n\r\n      <Button variant=\"contained\" color=\"primary\" onClick={handleDownload}>\r\n        Download as PDF\r\n      </Button>\r\n\r\n      {sortedPosts.map((post, index) => (\r\n        <div key={post._id} className={classes.postContainer}>\r\n          {index > 0 && <hr className={classes.divider} />}\r\n          <Typography variant=\"h5\" component=\"h2\" className={classes.reviewTitle}>\r\n            {index + 1}. Review Title: {post.title}\r\n          </Typography>\r\n          <Typography variant=\"subtitle1\" color=\"textSecondary\" className={classes.reviewerName}>\r\n            Review posted by: {post.name}\r\n          </Typography>\r\n          <Typography variant=\"subtitle2\" color=\"textSecondary\" className={classes.postedAt}>\r\n            Review posted at: {post.createdAt.substring(0, 10)}\r\n          </Typography>\r\n          <Typography variant=\"body2\" component=\"p\" className={classes.reviewMessage}>\r\n            Review Message: {truncateText(post.message)}\r\n          </Typography>\r\n          <Typography variant=\"subtitle2\" color=\"textSecondary\" className={classes.totalLikes}>\r\n            Total Likes: {post.likeCount}\r\n</Typography>\r\n</div>\r\n))}\r\n</Container>\r\n);\r\n\r\n};\r\n\r\nexport default Top5;\r\n"]},"metadata":{},"sourceType":"module"}